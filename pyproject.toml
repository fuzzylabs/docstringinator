[build-system]
requires = ["setuptools>=68.0", "wheel>=0.40.0"]
build-backend = "setuptools.build_meta"

[project]
name = "docstringinator"
version = "0.1.0"
description = "A Python tool for automatically fixing and improving docstrings using Large Language Models (LLMs)"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["docstring", "llm", "pre-commit", "documentation", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",

    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Documentation",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
]
requires-python = ">=3.8"
dependencies = [
    "click>=8.0.0",
    "pyyaml>=6.0",
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "requests>=2.31.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "jinja2>=3.1.0",
    "pathspec>=0.11.0",
    "toml>=0.10.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.6",
    "mypy>=1.0.0",
    "codespell>=2.2.6",
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "build>=1.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.6",
    "mypy>=1.0.0",
    "codespell>=2.2.6",
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "build>=1.0.0",
    "types-requests>=2.32.0.20241016",
    "types-pyyaml>=6.0.12.20241230",
]

[project.scripts]
docstringinator = "docstringinator.cli:main"

[project.urls]
Homepage = "https://github.com/your-username/docstringinator"
Documentation = "https://docstringinator.readthedocs.io"
Repository = "https://github.com/your-username/docstringinator"
"Bug Tracker" = "https://github.com/your-username/docstringinator/issues"
Changelog = "https://github.com/your-username/docstringinator/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["docstringinator*"]

[tool.setuptools.package-data]
docstringinator = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["docstringinator"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
# Ignore abstract class instantiation in factory
[[tool.mypy.overrides]]
module = "docstringinator.providers.factory"
disable_error_code = ["abstract"]

[[tool.mypy.overrides]]
module = [
    "openai.*",
    "anthropic.*",
    "ast.*",
    "click.*",
    "rich.*",
    "pydantic.*",
    "pydantic_settings.*",
    "jinja2.*",
    "pathspec.*",
    "toml.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["docstringinator"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "Q",  # flake8-quotes
    "S",  # flake8-bandit
    "A",  # flake8-builtins
    "COM", # flake8-commas
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PIE", # flake8-pie
    "TID", # flake8-tidy-imports
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "PTH", # flake8-use-pathlib
    "LOG", # flake8-logging-format
    "RSE", # flake8-raise
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "DTZ", # flake8-datetimez
    "AIR", # flake8-imports
    "PERF", # perflint
    "FURB", # refurb
    "TRY", # tryceratops
    "NPY", # numpy-vet
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert detected
    "S603",  # subprocess call - check for execution of untrusted input
    "S607",  # starting a process with a partial executable path
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = [
    "B011",  # do not call setattr with a constant attribute value
    "S101",  # use of assert detected
    "S603",  # subprocess call - check for execution of untrusted input
    "S607",  # starting a process with a partial executable path
    "ARG002",  # unused method argument (needed for mock decorators)
    "FBT001",  # boolean-typed positional argument in function definition
    "FBT003",  # boolean positional value in function call
    "PERF203",  # try-except within a loop (acceptable in tests)
    "BLE001",  # blind exception catching (acceptable in tests)
    "TRY400",  # use logging.exception instead of logging.error (acceptable in tests)
]
"**/migrations/**" = ["E501", "F401"]

[tool.sphinx]
project = "Docstringinator"
copyright = "2024, Your Name"
author = "Your Name"
release = "0.1.0"
version = "0.1.0"

[tool.sphinx.extensions]
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.napoleon",
    "sphinx.ext.viewcode",
    "sphinx.ext.intersphinx",
    "myst_parser",
]

[tool.sphinx.html_theme]
html_theme = "sphinx_rtd_theme"

[tool.sphinx.html_theme_options]
navigation_depth = 4
collapse_navigation = false

[tool.sphinx.intersphinx_mapping]
python = ["https://docs.python.org/3", ""]
